import java.time.Instant
import java.time.LocalDate

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id "org.flywaydb.flyway" version "8.5.1"
    id 'jacoco'
    id "au.com.dius.pact" version "4.3.5"
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://s3-us-west-2.amazonaws.com/dynamodb-local/release'
    }
    flatDir {
        dirs 'libs'
    }
}

project.sourceCompatibility = JavaVersion.VERSION_16
project.targetCompatibility = JavaVersion.VERSION_16

group = 'uk.gov.justice.probation'

ext {
    restAssuredVersion = '4.5.1'
    pactVersion = '4.3.5'
}

def today = Instant.now()
def todaysDate = LocalDate.now().format('yyyy-MM-dd')
version = System.getenv('CI') ? "${todaysDate}.${System.getenv('CIRCLE_BUILD_NUM')}" : todaysDate

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    agentDeps.transitive = false
}

jar {
    enabled = false
    manifest {
        attributes(
                'Implementation-Title': rootProject.name, 'Implementation-Version': archiveVersion
        )
    }
}

bootJar {
    manifest = jar.manifest
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/postgres?currentSchema=courtcaseservice&user=root&password=dev'
}

springBoot {
    buildInfo {
        properties {
            artifact = rootProject.name
            version = version
            group = group
            name = rootProject.name
            time = today
            additional = [
                    by                   : System.properties['user.name'],
                    operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine              : InetAddress.localHost.hostName
            ]
        }
    }
}

test {
    useJUnitPlatform()
    filter {
        excludeTestsMatching '*VerificationPactTest'
        excludeTestsMatching '*SmokeTest'
        excludeTestsMatching '*WIP*'
    }

    testLogging {
        events "started", "passed", "skipped", "failed", "standardError"
        exceptionFormat "short"
        showStackTraces = true
        showExceptions = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching '*IntTest*'
    }
}

task pactTestPublish(type: Test) {
    useJUnitPlatform()
    filter {
        excludeTestsMatching '*IntTest'
        includeTestsMatching '*VerificationPactTest'
    }

    systemProperty("pact.provider.tag", System.getenv("PACT_PROVIDER_TAG"))
    systemProperty("pact.provider.version", System.getenv("PACT_PROVIDER_VERSION"))
    systemProperty("pact.verifier.publishResults", true)
    systemProperty("pactbroker.host", System.getenv("PACTBROKER_HOST"))

    testLogging {
        events "started", "passed", "skipped", "failed", "standardError"
        exceptionFormat "short"
        showStackTraces = true
        showExceptions = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

task unitTest(type: Test) {
    useJUnitPlatform()
    filter {
        excludeTestsMatching '*IntTest'
        excludeTestsMatching '*SmokeTest'
        excludeTestsMatching '*WIP*'
    }
}

task wipTest(type: Test) {
    filter {
        includeTestsMatching '*WIP*'
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    api 'org.projectlombok:lombok'

    runtimeOnly 'org.flywaydb:flyway-core'
    runtimeOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly 'org.postgresql:postgresql:42.3.3'

    implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'
    implementation ('org.springframework.boot:spring-boot-starter-webflux') {
        implementation  ("org.apache.logging.log4j:log4j-api:2.17.2")
        because("vulnerability in packaged version 2.14.1")
    }
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation('org.springframework.security:spring-security-oauth2-client') {
        exclude group: 'com.nimbusds', module: 'oauth2-oidc-sdk'
        because 'Known vulnerability and library not used'
    }

    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.vladmihalcea:hibernate-types-52:2.14.0'
    implementation("org.springframework.retry:spring-retry:1.3.1")

    implementation "com.github.kittinunf.fuel:fuel:2.3.1"
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'com.microsoft.azure:applicationinsights-spring-boot-starter:2.6.4'
    implementation 'com.microsoft.azure:applicationinsights-logging-logback:2.6.4'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.0.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
        because 'allows tests to run from IDEs that bundle older version of launcher'
    }

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.32.0'
    testImplementation("io.rest-assured:json-path:$restAssuredVersion")
    testImplementation("io.rest-assured:xml-path:$restAssuredVersion")
    testImplementation("io.rest-assured:rest-assured:$restAssuredVersion") {
        exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    }

    testImplementation("org.codehaus.groovy:groovy:3.0.9") {
        because "Transitive dependency. Latest version of RestAssured incompatible with v2 of Groovy brought in by Spring"
    }

    testImplementation("org.codehaus.groovy:groovy-json:3.0.9") {
        because "Transitive dependency. Latest version of RestAssured incompatible with v2 of Groovy brought in by Spring"
    }

    testImplementation("org.codehaus.groovy:groovy-xml:3.0.10") {
        because "Transitive dependency. Latest version of RestAssured incompatible with v2 of Groovy brought in by Spring"
    }

    testImplementation(platform("org.junit:junit-bom:5.8.2"))
    testImplementation("org.junit.jupiter:junit-jupiter")

    testImplementation("com.github.tomakehurst:wiremock-jre8:2.32.0")

    testImplementation("au.com.dius.pact.provider:junit5spring:$pactVersion")
    testImplementation("au.com.dius.pact.provider:junit5:$pactVersion")
    testImplementation("au.com.dius.pact:consumer:$pactVersion")
    testImplementation("au.com.dius.pact.consumer:junit5:$pactVersion")

    testImplementation("org.apache.httpcomponents:fluent-hc:4.5.13")

    agentDeps 'com.microsoft.azure:applicationinsights-agent:3.2.7'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.enabled = false
        xml.enabled = true
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['uk.gov.justice.probation.*']
            excludes = ['uk.gov.justice.probation.courtcaseservice.jpa.repository.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                minimum = 0.8
            }
            limit {
                counter = 'METHOD'
                value = 'TOTALCOUNT'
                minimum = 0.8
            }
        }
    }
}

task copyAgent(type: Copy) {
    from configurations.agentDeps
    into "$buildDir/libs"
}

task copyAgentConfig(type: Copy) {
    from "applicationinsights.json"
    into "$buildDir/libs"
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'hooks/')
    into { new File(rootProject.rootDir, '.git/hooks') }
}

pact {
    publish {
        pactBrokerUrl = System.getenv("PACTBROKER_URL")
        pactBrokerUsername = System.getenv("PACTBROKER_AUTH_USERNAME")
        pactBrokerPassword = System.getenv("PACTBROKER_AUTH_PASSWORD")
        pactDirectory = 'build/pacts'
        consumerVersion = System.getenv("PACTCONSUMER_VERSION")
    }
}

assemble.dependsOn copyAgent
assemble.dependsOn copyAgentConfig
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

