package uk.gov.justice.probation.courtcaseservice.jpa.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vladmihalcea.hibernate.type.json.JsonBinaryType;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.ToString;
import lombok.With;
import lombok.experimental.SuperBuilder;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.TypeDef;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Schema(description = "Court Case")
@Entity
@AllArgsConstructor
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@SQLDelete(sql = "UPDATE COURT_CASE SET deleted = true WHERE ID = ? AND VERSION = ?")
@SuperBuilder
@ToString(doNotUseGetters = true)
@Getter
@With
@Table(name = "COURT_CASE")
@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
public class CourtCaseEntity extends BaseImmutableEntity implements Serializable {

    @Id
    @Column(name = "ID", updatable = false, nullable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JsonIgnore
    private final Long id;

    @Column(name = "CASE_ID", nullable = false)
    private final String caseId;            // This is our primary identifier, provided by CP and generated by us for Libra, it unsurprisingly identifies a unique case

    @Column(name = "CASE_NO", nullable = false)
    private final String caseNo;            // This is a secondary identifier for a case and the primary identifier for Libra cases - used to identify existing Libra cases initially then we use caseId from then on

    @ToString.Exclude
    @LazyCollection(value = LazyCollectionOption.FALSE)
    @JsonIgnore
    @OneToMany(mappedBy = "courtCase", cascade = CascadeType.ALL, orphanRemoval=true)
    private final List<HearingEntity> hearings;     // This is a new entity that groups the defendants and hearingDays. There can be multiple for a case on different days with different defendants. A picture of the full case can be built up by aggregating these hearings.

    @Column(name = "LIST_NO")
    private final String listNo;            // This is a Libra only field and is effectively static for an entire case. It will eventually go away with Libra. Currently held in HearingEntity for bad historical reasons.

    @Column(name = "SOURCE_TYPE")
    @Enumerated(EnumType.STRING)
    private final SourceType sourceType;        // Source will not change for a given case, hence it's here not in HearingEntity

    @Column(name = "deleted", nullable = false, updatable = false)
    private final boolean deleted;              // Conceivably we might want to delete a hearing or a full case so this is present at case and hearing level. We don't actively set these fields as yet but we do honour them in our queries


    public DefendantEntity getDefendant(String defendantId) {
        return Optional.ofNullable(hearings).orElse(Collections.emptyList())
            .stream()
            .map(HearingEntity::getDefendants)
            .flatMap(Collection::stream)
            .distinct()
            .filter(defendantEntity -> defendantId.equalsIgnoreCase(defendantEntity.getDefendantId()))
            .findFirst()
            .orElse(null);
    }
}
