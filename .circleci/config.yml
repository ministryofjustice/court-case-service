version: 2.1

parameters:
  alerts-slack-channel:
    type: string
    default: probation_in_court_alerts_dev

commands:
  setup-live:
    description: "Install tools and configure kubectl"
    steps:
      - aws-cli/install
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.11.2
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="${KUBE_ENV_API}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
            kubectl -n "${KUBE_ENV_NAMESPACE}" get pods

  set_app_version:
    description: "Set app version string"
    steps:
      - run:
          name: create app version string
          command: |
            $JAVA_HOME/bin/jar xvf build/libs/court-case-service-*.jar META-INF/build-info.properties
            VERSION=$(grep 'build.version=' META-INF/build-info.properties | awk -F= '{print $2}')
            rm META-INF/build-info.properties
            SHORT_HASH=$(git rev-parse --short HEAD)
            FULL_VERSION=${VERSION}.${SHORT_HASH}
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              FULL_VERSION=${VERSION}
            fi
            echo "export APP_VERSION=$FULL_VERSION" >> $BASH_ENV
      - mem/remember:
          env_var: APP_VERSION
          value: "${APP_VERSION}"
  deploy_to_live_env:
    parameters:
      env:
        type: string
    steps:
      - setup-live
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - mem/recall:
          env_var: APP_VERSION
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            helm upgrade court-case-service ~/git/helm_deploy/court-case-service/. \
              --install --wait --reset-values --timeout 360s \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --description="${APP_VERSION} - ${CIRCLE_BUILD_URL}" \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --values ~/git/helm_deploy/court-case-service/values-live.yaml \
              --set image.tag="${APP_VERSION}" \
              --set nginx_proxy.deployment.image.tag="${APP_VERSION}"
executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: cimg/openjdk:21.0.2-browsers
        environment:
          SPRING_PROFILES_ACTIVE: test
          DATABASE_USERNAME: root
          DATABASE_PASSWORD: dev
          DATABASE_NAME: court_case_test
          DATABASE_ENDPOINT: 127.0.0.1:5432
      - image: cimg/postgres:14.9
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: court_case_test
          POSTGRES_PASSWORD: dev
    working_directory: ~/app

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  hmpps: ministryofjustice/hmpps@10.1.1
  kubernetes: circleci/kubernetes@1.3.1
  helm: circleci/helm@2.0.1
  mem: circleci/rememborb@0.0.1
  jira: circleci/jira@1.2.2

jobs:
  build:
    executor:
      name: hmpps/java_localstack_postgres
      jdk_tag: "21.0"
      localstack_tag: "3.0"
      postgres_tag: "14.12"
      resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}
            - gradle-
      - run: ./gradlew build jacocoTestReport
      - set_app_version
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - persist_to_workspace:
          root: .
          paths:
            - build/libs
            - build.gradle
            - app_version.txt
      - jira/notify:
          job_type: build

  build_docker:
    executor: deployer
    parameters:
      main:
        type: boolean
        default: false
      app_name:
        type: string
      dockerfile_path:
        type: string
        default: .
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - mem/recall:
          env_var: APP_VERSION
      - run:
          name: Build docker image
          command: |
            docker build --rm=false <<parameters.dockerfile_path>> \
               --pull \
               --tag "hmpps/<<parameters.app_name>>:$APP_VERSION" \
               --label "maintainer=info@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1"
      - when:
          condition: << parameters.main >>
          steps:
            - run:
                name: Publish to docker hub
                command: |
                  docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
                  docker tag hmpps/<<parameters.app_name>>:$APP_VERSION quay.io/hmpps/<<parameters.app_name>>:$APP_VERSION
                  docker tag hmpps/<<parameters.app_name>>:$APP_VERSION quay.io/hmpps/<<parameters.app_name>>:latest
                  docker push quay.io/hmpps/<<parameters.app_name>>:$APP_VERSION
                  docker push quay.io/hmpps/<<parameters.app_name>>:latest
      - jira/notify:
          job_type: build

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "dev"
      - jira/notify:
          environment: dev
          environment_type: development
          job_type: deployment
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "preprod"
      - jira/notify:
          environment: preprod
          environment_type: testing
          job_type: deployment
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "prod"
      - jira/notify:
          environment: prod
          environment_type: production
          job_type: deployment

workflows:
  version: 2
  security:
    triggers:
      - schedule:
          cron: "52 6 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/gradle_owasp_dependency_check:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          jdk_tag: "21.0"
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
            - veracode-credentials
  security-weekly:
    triggers:
      - schedule:
          cron: "23 4 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars

  build-test-and-deploy:
    jobs:
      - build:
          context: [hmpps-common-vars]
          filters:
            tags:
              ignore: /.*/
      - hmpps/helm_lint:
          name: helm_lint_dev
      - hmpps/database_schema_report:
          schema: "courtcaseservicetest"
          initialise_database: "./gradlew initialiseDatabase"
          filters:
            branches:
              only: main
      - build_docker:
          name: build_docker
          context: [ hmpps-common-vars ]
          app_name: court-case-service
          requires:
            - build
          main: true
      - build_docker:
          name: build_docker_nginx
          app_name: court-case-service-nginx
          dockerfile_path: ./nginx
          context:
            - hmpps-common-vars
          requires:
            - build
          main: true
      - deploy_dev:
          context:
            - hmpps-common-vars
          requires:
            - helm_lint_dev
            - build_docker
            - build_docker_nginx
          filters:
            branches:
              only:
                - main
                - /.*workflow_test_branch.*/
      - request_preprod_approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context:
            - court-probation-live-preprod
            - hmpps-common-vars
          requires:
            - request_preprod_approval
      - request_prod_approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context:
            - court-probation-live-prod
            - hmpps-common-vars
          requires:
            - request_prod_approval
