import java.time.LocalDate

plugins {
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.flywaydb.flyway' version '11.9.1'
    id "uk.gov.justice.hmpps.gradle-spring-boot" version "8.2.0"
    id 'jacoco'
    id "au.com.dius.pact" version "4.6.17"
    id 'org.jetbrains.kotlin.plugin.spring' version '2.1.21'
    id 'org.jetbrains.kotlin.plugin.lombok' version '2.1.21'
}


repositories {
    mavenCentral()
    maven {
        url = 'https://s3-us-west-2.amazonaws.com/dynamodb-local/release'
    }
    flatDir {
        dirs 'libs'
    }
}

group = 'uk.gov.justice.probation'

ext {
    restAssuredVersion = '5.5.5'
    pactVersion = '4.6.17'
}

ktlint {
    version.set("1.4.1")
}

def todaysDate = LocalDate.now().format('yyyy-MM-dd')
version = System.getenv('CI') ? "${todaysDate}.${System.getenv('CIRCLE_BUILD_NUM')}" : todaysDate

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    agentDeps.transitive = false
}

jar {
    enabled = false
    manifest {
        attributes(
                'Implementation-Title': rootProject.name, 'Implementation-Version': archiveVersion
        )
    }
}

bootJar {
    manifest = jar.manifest
}

test {
    useJUnitPlatform()
    filter {
        excludeTestsMatching '*VerificationPactTest'
        excludeTestsMatching '*SmokeTest'
        excludeTestsMatching '*WIP*'
    }

    testLogging {
        events "started", "passed", "skipped", "failed", "standardError"
        exceptionFormat = "short"
        showStackTraces = true
        showExceptions = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching '*IntTest*'
    }
}

tasks.register('initialiseDatabase', Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching '*PingerIntTest*'
    }
}

tasks.register('pactVerifyPublish', Test) {
    useJUnitPlatform()
    filter {
        excludeTestsMatching '*IntTest'
        includeTestsMatching '*VerificationPactTest'
    }

    systemProperty("pact.provider.tag", System.getenv("PACT_PROVIDER_TAG"))
    systemProperty("pact.provider.version", System.getenv("PACT_PROVIDER_VERSION"))
    systemProperty("pact.verifier.publishResults", true)
    systemProperty("pactbroker.host", System.getenv("PACTBROKER_HOST"))

    testLogging {
        events "started", "passed", "skipped", "failed", "standardError"
        exceptionFormat = "short"
        showStackTraces = true
        showExceptions = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

task pactTestPublish dependsOn pactVerifyPublish

tasks.register('unitTest', Test) {
    useJUnitPlatform()
    filter {
        excludeTestsMatching '*IntTest'
        excludeTestsMatching '*SmokeTest'
        excludeTestsMatching '*WIP*'
        excludeTestsMatching '*VerificationPactTest'
    }
}

task wipTest(type: Test) {
    filter {
        includeTestsMatching '*WIP*'
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

kotlin {
    jvmToolchain(21)
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    modules {
        module("org.codehaus.groovy:groovy") {
            replacedBy("org.apache.groovy:groovy", "conflicts in current rest-assured version")
        }
    }

    implementation("net.minidev:json-smart:2.5.2") {
        because("SNYK scan reported secuity vulnerability in the bundled net.minidev:json-smart:2.4.8")
    }

    // Open API Documentation
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8")

    // SAR (Subject Access Request) endpoint is included here
    implementation("uk.gov.justice.service.hmpps:hmpps-kotlin-spring-boot-starter:1.4.5") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-oauth2-resource-server'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-oauth2-client'
    }

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0")
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin:2.19.0')

    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    api 'org.projectlombok:lombok:1.18.38'

    runtimeOnly("org.flywaydb:flyway-database-postgresql:11.9.1")
    runtimeOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly 'org.postgresql:postgresql:42.7.6'

    implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'

    implementation ('org.springframework.boot:spring-boot-starter-webflux')
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation("org.springframework.retry:spring-retry:2.0.12")
    implementation('org.springframework.security:spring-security-oauth2-client')
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation('org.springframework.data:spring-data-envers')

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk9")

    implementation 'io.jsonwebtoken:jjwt:0.12.6'
    implementation 'net.logstash.logback:logstash-logback-encoder:8.1'

    implementation("uk.gov.justice.service.hmpps:hmpps-sqs-spring-boot-starter:5.4.5")

    implementation group: 'ai.h2o', name: 'h2o-genmodel', version: '3.46.0.7'

    implementation 'commons-io:commons-io:2.19.0'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:4.1.1'
    testImplementation("io.rest-assured:json-path:$restAssuredVersion")
    testImplementation("io.rest-assured:xml-path:$restAssuredVersion")
    testImplementation("io.rest-assured:rest-assured:$restAssuredVersion")
    testImplementation("io.rest-assured:rest-assured-common:$restAssuredVersion")

    testImplementation(platform("org.junit:junit-bom:5.13.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")

    testImplementation("org.wiremock:wiremock-standalone:3.13.0") // works with spring boot 3.2.0 > higher

    testImplementation("au.com.dius.pact.provider:junit5spring:$pactVersion")
    testImplementation("au.com.dius.pact.provider:junit5:$pactVersion")
    testImplementation("au.com.dius.pact:consumer:$pactVersion")
    testImplementation("au.com.dius.pact.consumer:junit5:$pactVersion")

    testImplementation("org.apache.httpcomponents:fluent-hc:4.5.14")
    testImplementation("org.awaitility:awaitility-kotlin:4.3.0")
    testImplementation("org.mockito.kotlin:mockito-kotlin:5.4.0")

    agentDeps 'com.microsoft.azure:applicationinsights-agent:3.7.3'
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.21")

    // Spring ignores constructor binding on Kotlin data classes without this which in turn breaks hmpps-sqs-spring-boot-starter autoconfiguration
    runtimeOnly 'org.jetbrains.kotlin:kotlin-reflect:2.1.21'
}

jacoco {
    toolVersion = '0.8.13'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['uk.gov.justice.probation.*']
            excludes = ['uk.gov.justice.probation.courtcaseservice.jpa.repository.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                minimum = 0.8
            }
            limit {
                counter = 'METHOD'
                value = 'TOTALCOUNT'
                minimum = 0.8
            }
        }
    }
}

tasks.register('installGitHooks', Copy) {
    from new File(rootProject.rootDir, 'hooks/')
    into { new File(rootProject.rootDir, '.git/hooks') }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "21"
    }
}

pact {
    publish {
        pactBrokerUrl = System.getenv("PACTBROKER_URL")
        pactBrokerUsername = System.getenv("PACTBROKER_AUTH_USERNAME")
        pactBrokerPassword = System.getenv("PACTBROKER_AUTH_PASSWORD")
        pactDirectory = 'build/pacts'
        consumerVersion = System.getenv("PACTCONSUMER_VERSION")
    }
}


