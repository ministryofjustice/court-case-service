version: 2.1
commands:
  setup:
    description: "Install tools and configure kubectl"
    steps:
      - aws-cli/install
      - kubernetes/install
      - helm/install-helm-client:
          version: v2.13.1
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
            kubectl -n "${KUBE_ENV_NAMESPACE}" get pods

  set_app_version:
    description: "Set app version string"
    steps:
      - run:
          name: create app version string
          command: |
            jar xvf build/libs/court-case-service-*.jar BOOT-INF/classes/META-INF/build-info.properties
            VERSION=$(grep 'build.version=' BOOT-INF/classes/META-INF/build-info.properties | awk -F= '{print $2}')
            rm BOOT-INF/classes/META-INF/build-info.properties
            FULL_VERSION=${VERSION}.${CIRCLE_BRANCH}
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              FULL_VERSION=${VERSION}
            fi
            echo "export APP_VERSION=$FULL_VERSION" >> $BASH_ENV
      - mem/remember:
          env_var: APP_VERSION
          value: "${APP_VERSION}"

  deploy_to_env:
    parameters:
      env:
        type: string
    steps:
      - setup
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - mem/recall:
          env_var: APP_VERSION
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            helm upgrade court-case-service ~/git/helm_deploy/court-case-service/. \
              --install --wait --force --reset-values --timeout 360 \
              --tiller-namespace=${KUBE_ENV_NAMESPACE} \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --description="${APP_VERSION} - ${CIRCLE_BUILD_URL}" \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --set image.tag="${APP_VERSION}"
executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: circleci/openjdk:11-jdk-browsers
        environment:
          SPRING_PROFILES_ACTIVE: test
          DATABASE_USERNAME: root
          DATABASE_PASSWORD: dev
          DATABASE_NAME: court_case_test
          DATABASE_ENDPOINT: 127.0.0.1:5432
      - image: circleci/postgres:10.10-alpine-ram
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: court_case_test
          POSTGRES_PASSWORD: dev
    working_directory: ~/app
  sonar-scanner:
    docker:
      - image: sonarsource/sonar-scanner-cli:4.2
        environment:
          SONAR_HOST_URL: https://pcs-sonarqube.apps.live-1.cloud-platform.service.justice.gov.uk/
          SONAR_PROJECT_KEY: court-case-service
    working_directory: ~/app

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  dps: ministryofjustice/dps@1.2.1
  kubernetes: circleci/kubernetes@0.3.0
  helm: circleci/helm@0.1.2
  mem: circleci/rememborb@0.0.1
  snyk: snyk/snyk@0.0.10

_snyk_options: &snyk_options
  organization: "digital-probation-services"
  severity-threshold: "high" # note: this does not affect snyk 'monitor' commands
  fail-on-issues: true

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}
            - gradle-
      - run: ./gradlew build jacocoTestReport
      - set_app_version
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - persist_to_workspace:
          root: .
          paths:
            - build/libs
            - build.gradle

  build_docker:
    executor: deployer
    parameters:
      master:
        type: boolean
        default: false
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - mem/recall:
          env_var: APP_VERSION
      - run:
          name: Build docker image
          command: |
            docker build --rm=false . \
               --tag "mojdigitalstudio/court-case-service:$APP_VERSION" \
               --label "maintainer=info@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1"
      - snyk/scan:
          project: '${CIRCLE_PROJECT_REPONAME}-docker/${CIRCLE_BRANCH}'
          docker-image-name: 'mojdigitalstudio/court-case-service:$APP_VERSION'
          target-file: 'Dockerfile'
          monitor-on-build: << parameters.master >>
          <<: *snyk_options
      - when:
          condition: << parameters.master >>
          steps:
            - run:
                name: Publish to docker hub
                command: |
                  docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                  docker tag mojdigitalstudio/court-case-service:$APP_VERSION mojdigitalstudio/court-case-service:latest
                  docker push mojdigitalstudio/court-case-service:$APP_VERSION
                  docker push mojdigitalstudio/court-case-service:latest

  app_scan:
    executor: builder
    parameters:
      master:
        type: boolean
        default: false
    steps:
      - checkout
      - snyk/scan:
          project: '${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}'
          monitor-on-build: << parameters.master >>
          <<: *snyk_options

  image_scan:
    executor: deployer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - snyk/scan:
          project: '${CIRCLE_PROJECT_REPONAME}-docker/${CIRCLE_BRANCH}'
          docker-image-name: 'mojdigitalstudio/court-case-service:latest'
          target-file: 'Dockerfile'
          monitor-on-build: true
          <<: *snyk_options

  sonar_scan:
    executor: sonar-scanner
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Run sonar scan
          command: |
            set -euo pipefail
            declare -a args
            add_env_var_as_env_prop() {
              if [ "$1" ]; then
                args+=("-D$2=$1")
              fi
            }
            add_env_var_as_env_prop "${SONAR_LOGIN:-}" "sonar.login"
            add_env_var_as_env_prop "${SONAR_PASSWORD:-}" "sonar.password"
            add_env_var_as_env_prop "${SONAR_USER_HOME:-}" "sonar.userHome"
            add_env_var_as_env_prop "${SONAR_PROJECT_BASE_DIR:-}" "sonar.projectBaseDir"
            add_env_var_as_env_prop "${SONAR_PROJECT_KEY:-}" "sonar.projectKey"
            PROJECT_BASE_DIR="$PWD"
            if [ "${SONAR_PROJECT_BASE_DIR:-}" ]; then
              PROJECT_BASE_DIR="${SONAR_PROJECT_BASE_DIR}"
            fi
            export SONAR_USER_HOME="$PROJECT_BASE_DIR/.sonar"
            sonar-scanner "${args[@]}"

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"

workflows:
  version: 2
  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - sonar_scan:
          requires:
            - build
      - app_scan:
          master: true
      - image_scan
  build-test-and-deploy:
    jobs:
      - app_scan:
          filters:
            branches:
              ignore: master
      - app_scan:
          name: app_scan_master
          filters:
            branches:
              only: master
          master: true
      - build:
          filters:
            tags:
              ignore: /.*/
      - dps/helm_lint:
          name: helm_lint_dev
          env: dev
          chart_name: court-case-service
      - build_docker:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - build_docker:
          name: build_docker_master
          requires:
            - build
          filters:
            branches:
              only: master
          master: true
      - deploy_dev:
          requires:
            - helm_lint_dev
            - build_docker_master
          filters:
            branches:
              only: master
      - request_preprod_approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: court-probation-preprod
          requires:
            - request_preprod_approval
      - request_prod_approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: court-probation-prod
          requires:
            - request_prod_approval
